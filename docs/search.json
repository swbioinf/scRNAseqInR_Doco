[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"Material scRNAseq analysis R Seurat workshop.workshop follows introductory Guided Clustering Tutorial tutorial Seurat.also drawing similar workshop held Monash Bioinformatics Platform Single-Cell-Workshop, material \n","code":""},{"path":"schedule.html","id":"schedule","chapter":"2 Schedule","heading":"2 Schedule","text":"","code":""},{"path":"preprocessing.html","id":"preprocessing","chapter":"3 Seurat PBMC3k Tutorial","heading":"3 Seurat PBMC3k Tutorial","text":"","code":""},{"path":"preprocessing.html","id":"load-data","chapter":"3 Seurat PBMC3k Tutorial","heading":"3.1 Load data","text":"","code":""},{"path":"preprocessing.html","id":"input-data","chapter":"3 Seurat PBMC3k Tutorial","heading":"3.1.1 Input data","text":"input files look like? varies, output CellRanger pipleine single sample.don’t usually need look , useful files :web_summary.html Nice QC summaryfiltered_feature_bc_matrix/ folder 3 files contain ‘counts matrix’, many copies gene per cell. Often available public data, e.g. kidney organioid studyThe contents fully described . 10X provides example data like (requires email): https://www.10xgenomics.com/datasets/5k-human-pbmcs-3-v3-1-chromium-controller-3-1-standard","code":"├── analysis\n│   ├── clustering\n│   ├── diffexp\n│   ├── pca\n│   ├── tsne\n│   └── umap\n├── cloupe.cloupe\n├── filtered_feature_bc_matrix\n│   ├── barcodes.tsv.gz\n│   ├── features.tsv.gz\n│   └── matrix.mtx.gz\n├── filtered_feature_bc_matrix.h5\n├── metrics_summary.csv\n├── molecule_info.h5\n├── possorted_genome_bam.bam\n├── possorted_genome_bam.bam.bai\n├── raw_feature_bc_matrix\n│   ├── barcodes.tsv.gz\n│   ├── features.tsv.gz\n│   └── matrix.mtx.gz\n├── raw_feature_bc_matrix.h5\n└── web_summary.html"},{"path":"preprocessing.html","id":"setup-the-seurat-object","chapter":"3 Seurat PBMC3k Tutorial","heading":"3.1.2 Setup the Seurat Object","text":"Tutorial: https://satijalab.org/seurat/articles/pbmc3k_tutorial#setup--seurat-object","code":"\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(Seurat)\nlibrary(patchwork)\n\n# Load the PBMC dataset\npbmc.data <- Read10X(data.dir = \"data/pbmc3k/filtered_gene_bc_matrices/hg19/\") # This path on our VMs!\n# Initialize the Seurat object with the raw (non-normalized data).\npbmc <- CreateSeuratObject(counts = pbmc.data, project = \"pbmc3k\", min.cells = 3, min.features = 200)\npbmc"},{"path":"preprocessing.html","id":"qc-filtering","chapter":"3 Seurat PBMC3k Tutorial","heading":"3.2 QC Filtering","text":"Tutorial: https://satijalab.org/seurat/articles/pbmc3k_tutorial#qc--selecting-cells---analysisLow quality cells can add noise results leading wrong biological conclusions. Using good quality cells helps avoid . Reduce noise data filtering low quality cells dying stressed cells (high mitochondrial expression) cells features can reflect empty droplets.metadata seurat object contains information cell, just QC pbmc@meta.data pbmc[[]].Running PercentageFeatureSet() added new columns, can also add information . use metadata lot!E.g. real experiment multiple samples, can load sample, record information - combine one, big, seurat object. NB: won’t cover today, see merging seurat objects tutorial","code":"\nso.1 <- # load sample 1\nso.1$samplename <- \"sample1\"\nso.1$group      <- \"treatment\"\n# then sample 2-12"},{"path":"preprocessing.html","id":"challenge-filter-the-cells","chapter":"3 Seurat PBMC3k Tutorial","heading":"Challenge: Filter the cells","text":"Apply filtering thresolds defined .many cells survived filtering?PBMC3k dataset ’re working tutorial quite old. number example datasets available 10X website, including one - published 2022, sequencing 10k PBMCs newer chemistry counting method.thresholds chose apply modern dataset?","code":"\npbmc10k_unfiltered <- readRDS(\"data/10k_PBMC_v3.1ChromiumX_Intronic.rds\")\nVlnPlot(pbmc10k_unfiltered, features = \"nCount_RNA\") + scale_y_log10()\nVlnPlot(pbmc10k_unfiltered, features = \"nFeature_RNA\") + scale_y_log10()"},{"path":"preprocessing.html","id":"section","chapter":"3 Seurat PBMC3k Tutorial","heading":"","text":"","code":""},{"path":"preprocessing.html","id":"normalisation","chapter":"3 Seurat PBMC3k Tutorial","heading":"3.3 Normalisation","text":"Tutorial: https://satijalab.org/seurat/articles/pbmc3k_tutorial#normalizing--dataThe sequencing depth can different per cell. can bias counts expression showing higher numbers sequenced cells leading wrong biological conclusions. correct feature counts normalized.","code":""},{"path":"preprocessing.html","id":"pcas-and-umaps","chapter":"3 Seurat PBMC3k Tutorial","heading":"3.4 PCAs and UMAPs","text":"steps number-crunching get generating nice UMAP representation data.steps needed?Identification highly variable features (feature selection) Tutorial: Identifying variable features allows retaining real biological variability data reduce noise data.Scaling data Tutorial: Highly expresed genes can overpower signal less expresed genes equal importance. Within cell assumption underlying RNA content constant. Aditionally, variables provided vars..regress, individually regressed feature, resulting residuals scaled centered.\nstep allows controling cell cycle factors may bias clustering.Dimensionality reduction (PCA) Tutorial: Imagine gene represents dimension - axis plot. plot expression two genes simple scatterplot. genome thousands genes - collate information genes way allows visualise 2 dimensional image. dimensionality reduction comes , calculate meta-features contains combinations variation different genes. thousands genes, end 10s meta-featuresRun non-linear dimensional reduction (UMAP/tSNE) Tutorial: Finally, make UMAP plot.NB: skip clustering now, return cover greater depth.","code":""},{"path":"preprocessing.html","id":"challenge-pc-genes","chapter":"3 Seurat PBMC3k Tutorial","heading":"Challenge: PC genes","text":"can plot gene expression UMAP FeaturePlot() function.Try genes highly weighted principal component analysis. look?","code":""},{"path":"preprocessing.html","id":"section-1","chapter":"3 Seurat PBMC3k Tutorial","heading":"","text":"","code":""},{"path":"preprocessing.html","id":"save","chapter":"3 Seurat PBMC3k Tutorial","heading":"3.4.1 Save","text":"can save object point can easily loaded back without rerun computationally intensive steps performed , easily shared collaborators.","code":"\nsaveRDS(pbmc, file = \"pbmc_tutorial_saved.rds\") "},{"path":"preprocessing.html","id":"the-seurat-object","chapter":"3 Seurat PBMC3k Tutorial","heading":"3.5 The Seurat object","text":"accommodate complexity data arising single cell RNA seq experiment, seurat object keeps container multiple data tables linked.Note seurat supports multimodal data; e.g. RNA, protein tags cells. seurat v5, stored assays can multiple layers ). Today work one assay; RNA.RNA assay (default, , Assay)\ncounts layer : raw counts data\ndata layer : normalised data\nscale.data layer : scaled data (may available highly variable genes)\ncounts layer : raw counts datadata layer : normalised datascale.data layer : scaled data (may available highly variable genes)Beware: notation around Layers Assays changed Seurat v4 v5! older seurat objects ‘assay’ used refer v5 layers.","code":""},{"path":"clustering.html","id":"clustering","chapter":"4 Clustering","heading":"4 Clustering","text":"Tutorial: https://satijalab.org/seurat/articles/pbmc3k_tutorial#cluster--cellsClustering cells allow visualise variability data, can help segregate cells cell types.Creating cell clusters easy, understanding biologically-speaking can take time. try things aren’t introductory seruat tutorial.","code":""},{"path":"clustering.html","id":"cluster-cells","chapter":"4 Clustering","heading":"4.1 Cluster cells","text":"","code":""},{"path":"clustering.html","id":"choosing-a-cluster-resolution","chapter":"4 Clustering","heading":"4.2 Choosing a cluster resolution","text":"good idea try different resolutions clustering identify variability data.Plot ‘clustree’ decide many clusters resolution capture .Name cells corresponding cluster name resolution pick. case happy 0.5.Plot UMAP coloured clusters Dimplot","code":"\n# Do clustering at 0.1, 0.2, 0.3... 2.0\npbmc <- FindClusters(object = pbmc, reduction = \"umap\", resolution = seq(0.1, 2, 0.1), dims = 1:10)\n#> Warning: The following arguments are not used: reduction,\n#> dims\n\n#> Warning: The following arguments are not used: reduction,\n#> dims\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.9623\n#> Number of communities: 4\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.9346\n#> Number of communities: 7\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.9091\n#> Number of communities: 7\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.8890\n#> Number of communities: 9\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.8728\n#> Number of communities: 9\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.8564\n#> Number of communities: 10\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.8411\n#> Number of communities: 10\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.8281\n#> Number of communities: 11\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.8159\n#> Number of communities: 11\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.8036\n#> Number of communities: 11\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.7918\n#> Number of communities: 11\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.7798\n#> Number of communities: 12\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.7678\n#> Number of communities: 13\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.7575\n#> Number of communities: 13\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.7473\n#> Number of communities: 13\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.7370\n#> Number of communities: 15\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.7280\n#> Number of communities: 15\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.7185\n#> Number of communities: 15\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.7093\n#> Number of communities: 15\n#> Elapsed time: 0 seconds\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95927\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.7002\n#> Number of communities: 16\n#> Elapsed time: 0 seconds\n# the different clustering created\nnames(pbmc@meta.data)\n#>  [1] \"orig.ident\"      \"nCount_RNA\"      \"nFeature_RNA\"   \n#>  [4] \"percent.mt\"      \"RNA_snn_res.0.5\" \"seurat_clusters\"\n#>  [7] \"RNA_snn_res.0.1\" \"RNA_snn_res.0.2\" \"RNA_snn_res.0.3\"\n#> [10] \"RNA_snn_res.0.4\" \"RNA_snn_res.0.6\" \"RNA_snn_res.0.7\"\n#> [13] \"RNA_snn_res.0.8\" \"RNA_snn_res.0.9\" \"RNA_snn_res.1\"  \n#> [16] \"RNA_snn_res.1.1\" \"RNA_snn_res.1.2\" \"RNA_snn_res.1.3\"\n#> [19] \"RNA_snn_res.1.4\" \"RNA_snn_res.1.5\" \"RNA_snn_res.1.6\"\n#> [22] \"RNA_snn_res.1.7\" \"RNA_snn_res.1.8\" \"RNA_snn_res.1.9\"\n#> [25] \"RNA_snn_res.2\"\n\n# How many clusters (and how many cells in those clusters) do we get at different resolutions?\ntable(pbmc$RNA_snn_res.0.1)\n#> \n#>    0    1    2    3 \n#> 1190  688  416  344\ntable(pbmc$RNA_snn_res.0.5)\n#> \n#>   0   1   2   3   4   5   6   7   8 \n#> 684 481 476 344 291 162 155  32  13\ntable(pbmc$RNA_snn_res.2)\n#> \n#>   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14 \n#> 372 344 266 245 215 174 164 162 155 140 127  91  70  67  32 \n#>  15 \n#>  14\nlibrary(clustree)\n#> Loading required package: ggraph\n#> \n#> Attaching package: 'ggraph'\n#> The following object is masked from 'package:sp':\n#> \n#>     geometry\nclustree(pbmc, prefix = \"RNA_snn_res.\") + theme(legend.key.size = unit(0.05, \"cm\"))\n# The name of the cluster is prefixed with 'RNA_snn_res' and the number of the resolution\nIdents(pbmc) <- pbmc$RNA_snn_res.0.5\nDimPlot(pbmc, label = TRUE, repel = TRUE, label.box = TRUE) + NoLegend()"},{"path":"clustermarkers.html","id":"clustermarkers","chapter":"5 Cluster Markers","heading":"5 Cluster Markers","text":"","code":""},{"path":"clustermarkers.html","id":"why-do-we-need-to-do-this","chapter":"5 Cluster Markers","heading":"Why do we need to do this?","text":"Single cell data helps segregate cell types. Use markers identify cell types. warning: example cell types/markers well known making step easy, reality step needs experts curation.","code":""},{"path":"clustermarkers.html","id":"section-2","chapter":"5 Cluster Markers","heading":"","text":"","code":""},{"path":"clustermarkers.html","id":"finding-differentially-expressed-features-cluster-biomarkers","chapter":"5 Cluster Markers","heading":"5.1 Finding differentially expressed features (cluster biomarkers)","text":"Tutorial: https://satijalab.org/seurat/articles/pbmc3k_tutorial#finding-differentially-expressed-features-cluster-biomarkers","code":""},{"path":"clustermarkers.html","id":"use-markers-to-label-or-find-a-cluster","chapter":"5 Cluster Markers","heading":"5.2 Use markers to label or find a cluster","text":"know markers cell types, use AddModuleScore label .","code":"\ngenes_markers <- list(Naive_CD4_T = c(\"IL7R\", \"CCR7\"))\n\npbmc <- AddModuleScore(object = pbmc, features = genes_markers, ctrl = 5, name = \"Naive_CD4_T\",\n    search = TRUE)\n\n\n# notice the name of the cluster has a 1 at the end\nnames(pbmc@meta.data)\n#>  [1] \"orig.ident\"      \"nCount_RNA\"      \"nFeature_RNA\"   \n#>  [4] \"percent.mt\"      \"RNA_snn_res.0.5\" \"seurat_clusters\"\n#>  [7] \"RNA_snn_res.0.1\" \"RNA_snn_res.0.2\" \"RNA_snn_res.0.3\"\n#> [10] \"RNA_snn_res.0.4\" \"RNA_snn_res.0.6\" \"RNA_snn_res.0.7\"\n#> [13] \"RNA_snn_res.0.8\" \"RNA_snn_res.0.9\" \"RNA_snn_res.1\"  \n#> [16] \"RNA_snn_res.1.1\" \"RNA_snn_res.1.2\" \"RNA_snn_res.1.3\"\n#> [19] \"RNA_snn_res.1.4\" \"RNA_snn_res.1.5\" \"RNA_snn_res.1.6\"\n#> [22] \"RNA_snn_res.1.7\" \"RNA_snn_res.1.8\" \"RNA_snn_res.1.9\"\n#> [25] \"RNA_snn_res.2\"   \"Naive_CD4_T1\"\n\n# label that cell type\npbmc$cell_label = NA\npbmc$cell_label[pbmc$Naive_CD4_T1 > 1] = \"Naive_CD4_T\"\nIdents(pbmc) = pbmc$cell_label\n\n# plot\n# Using a custom colour scale \nFeaturePlot(pbmc, features = \"Naive_CD4_T1\", label = TRUE, repel = TRUE, ) + scale_colour_gradientn(colours = c(\"lightblue\",\"beige\",\"red\"))\n#> Scale for colour is already present.\n#> Adding another scale for colour, which will replace the\n#> existing scale."},{"path":"clustermarkers.html","id":"assigning-cell-type-identity-to-clusters","chapter":"5 Cluster Markers","heading":"5.3 Assigning cell type identity to clusters","text":"Tutorial: https://satijalab.org/seurat/articles/pbmc3k_tutorial#assigning-cell-type-identity--clustersThis presentend simple way tutorial, expanded approach .First, can avoid downstream hassles add letter clusters longer just numbers. , prefix ‘c’ onto cluster number, store factor.clusters c0 c8.Now, time make biologically-informed call cluster corresponds cell type. step can take time! often won’t possible confidently label clusters. approaches can use:Look cluster marker genes.Look known cell type markers - restricted cluster UMAP?Use celltype assignment tool (like singleR) call celltypes reference datasetCheck QC metrics difficult understand clusters - often cells low counts group together. might ‘unknown’/‘poor quality’ cluster.Check weird clusters just one sample. might spurious.separate similar clusters, can subset data calculate cell markers within subset.Finally, ’ve labels - can run store object.little extra code, can keep order celltypes, create labels\nincorporate cluster number. can useful keep cluster labels analysis\n(‘CD4+ T’ makes terrible filenames!), especially multiple clusters celltype (e.g. multiple similar yet different ‘stroma’ celltypes common).’s sample?Can figure cell types automatically? Yes! methods like singleR perfect.","code":"\n# Sometimes you need to change Idents, so make sure your favourite cluster is stored in its own column too!\n# 5 => c5\npbmc$cluster <- factor( paste0(\"c\", pbmc$RNA_snn_res.0.5),   levels=paste0('c', levels(pbmc$RNA_snn_res.0.5)))\nIdents(pbmc) <- pbmc$cluster\nlevels(pbmc$cluster)\n#> [1] \"c0\" \"c1\" \"c2\" \"c3\" \"c4\" \"c5\" \"c6\" \"c7\" \"c8\"\n# Template\ncluster_content <- list(\n  c0 = \"\",\n  c1 = \"\",\n  c2 = \"\",  \n  c3 = \"\",\n  c4 = \"\",\n  c5 = \"\",\n  c6 = \"\",\n  c7 = \"\",\n  c8 = \"\"\n)\ncluster_content <- list(\n  c0 = \"Naive CD4+ T\",\n  c1 = \"CD14+ Mono\",\n  c2 = \"Memory CD4+\",  \n  c3 = \"B\",\n  c4 = \"CD8+ T\",\n  c5 = \"Mono\",\n  c6 = \"NK\",\n  c7 = \"DC\",\n  c8 = \"Platelet\"\n)\n\n# \"c5\" => \"Mono\" \npbmc$celltype <- as.character(cluster_content[pbmc$cluster])\n# \"c5\" => \"Mono\" \npbmc$celltype <-factor(as.character(cluster_content[pbmc$cluster]), levels=cluster_content)\n\n# c5 => c5: Mono\npbmc$pretty_cluster_labels <- factor (\n  paste0(names(cluster_content[pbmc$cluster]), \": \", cluster_content[pbmc$cluster]) , \n  levels = paste0( names(cluster_content), \": \", cluster_content)\n)\npbmc@meta.data %>% \n  group_by(RNA_snn_res.0.5, cluster, celltype, pretty_cluster_labels) %>%\n  summarise(num_cells=n(), .groups=\"drop\")  %>%\n  DT::datatable()"},{"path":"singler.html","id":"singler","chapter":"6 SingleR","heading":"6 SingleR","text":"workshop focused Seurat package. However, another whole ecosystem R packages single cell analysis within Bioconductor. won’t go detail packages workshop, good material describing object type online : OSCA.now, ’ll just convert Seurat object object called SingleCellExperiment. popular packages Bioconductor work type Slingshot, Scran, Scater.now use package called SingleR label cell. SingleR uses reference data set cell types expression data infer best label cell. convenient collection cell type reference celldex package currently contains follow sets:example, ’ll use HumanPrimaryCellAtlasData set, contains high-level, fine-grained label types. Lets download reference datasetThe “main” labels.example types “fine” labels.Now ’ll label cells using SingleCellExperiment object, reference set.Keep types 10 cells label, put labels back Seurat object plot umap.nice see even though SingleR use clusters computed earlier, labels seem match clusters reasonably well.","code":"\n#install.packages(\"BiocManager\")\n#BiocManager::install(c(\"SingleCellExperiment\",\"SingleR\",\"celldex\"),ask=F)\nlibrary(SingleCellExperiment)\nlibrary(SingleR)\nlibrary(celldex)\nsce <- as.SingleCellExperiment(pbmc)\nsce\n#> class: SingleCellExperiment \n#> dim: 13714 2638 \n#> metadata(0):\n#> assays(3): counts logcounts scaledata\n#> rownames(13714): AL627309.1 AP006222.2 ... PNRC2.1\n#>   SRSF10.1\n#> rowData names(0):\n#> colnames(2638): AAACATACAACCAC-1 AAACATTGAGCTAC-1 ...\n#>   TTTGCATGAGAGGC-1 TTTGCATGCCTCAC-1\n#> colData names(31): orig.ident nCount_RNA ...\n#>   pretty_cluster_labels ident\n#> reducedDimNames(2): PCA UMAP\n#> mainExpName: RNA\n#> altExpNames(0):\nls('package:celldex')\n#> [1] \"BlueprintEncodeData\"             \n#> [2] \"DatabaseImmuneCellExpressionData\"\n#> [3] \"HumanPrimaryCellAtlasData\"       \n#> [4] \"ImmGenData\"                      \n#> [5] \"MonacoImmuneData\"                \n#> [6] \"MouseRNAseqData\"                 \n#> [7] \"NovershternHematopoieticData\"\n# This too is a sce object,\n# colData is equivalent to seurat's metadata\nref.set <- celldex::HumanPrimaryCellAtlasData()\n#> snapshotDate(): 2023-04-24\n#> see ?celldex and browseVignettes('celldex') for documentation\n#> loading from cache\n#> see ?celldex and browseVignettes('celldex') for documentation\n#> loading from cache\nunique(ref.set$label.main)\n#>  [1] \"DC\"                   \"Smooth_muscle_cells\" \n#>  [3] \"Epithelial_cells\"     \"B_cell\"              \n#>  [5] \"Neutrophils\"          \"T_cells\"             \n#>  [7] \"Monocyte\"             \"Erythroblast\"        \n#>  [9] \"BM & Prog.\"           \"Endothelial_cells\"   \n#> [11] \"Gametocytes\"          \"Neurons\"             \n#> [13] \"Keratinocytes\"        \"HSC_-G-CSF\"          \n#> [15] \"Macrophage\"           \"NK_cell\"             \n#> [17] \"Embryonic_stem_cells\" \"Tissue_stem_cells\"   \n#> [19] \"Chondrocytes\"         \"Osteoblasts\"         \n#> [21] \"BM\"                   \"Platelets\"           \n#> [23] \"Fibroblasts\"          \"iPS_cells\"           \n#> [25] \"Hepatocytes\"          \"MSC\"                 \n#> [27] \"Neuroepithelial_cell\" \"Astrocyte\"           \n#> [29] \"HSC_CD34+\"            \"CMP\"                 \n#> [31] \"GMP\"                  \"MEP\"                 \n#> [33] \"Myelocyte\"            \"Pre-B_cell_CD34-\"    \n#> [35] \"Pro-B_cell_CD34+\"     \"Pro-Myelocyte\"\nhead(unique(ref.set$label.fine))\n#> [1] \"DC:monocyte-derived:immature\"       \n#> [2] \"DC:monocyte-derived:Galectin-1\"     \n#> [3] \"DC:monocyte-derived:LPS\"            \n#> [4] \"DC:monocyte-derived\"                \n#> [5] \"Smooth_muscle_cells:bronchial:vit_D\"\n#> [6] \"Smooth_muscle_cells:bronchial\"\npred.cnts <- SingleR::SingleR(test = sce, ref = ref.set, labels = ref.set$label.main)\nlbls.keep <- table(pred.cnts$labels)>10\npbmc$SingleR.labels <- ifelse(lbls.keep[pred.cnts$labels], pred.cnts$labels, 'Other')\nDimPlot(pbmc, reduction='umap', group.by='SingleR.labels')"},{"path":"de2.html","id":"de2","chapter":"7 Differential Expression","heading":"7 Differential Expression","text":"many different methods calculating differential expression groups scRNAseq data. number review papers worth consulting topic.Seurat differential expression Vignette walks variety implemented Seurat.also good discussion useing pseudobulk approaches worth checking youre planning differential expression analyses.now look GSE96583, another PBMC dataset. speed, looking subset 5000 cells data. cells dataset pooled eight individual donors. data contains two batches single cell sequencing. One batches stimulated IFN-beta.data already processed done first PBMC dataset, can loaded kang2018.rds file data folder.cells condition ?many cells per individuals per group?sample, many cell type classified?","code":"\nkang <- readRDS(\"data/kang2018.rds\")\nhead(kang@meta.data)\n#>                     orig.ident nCount_RNA nFeature_RNA  ind\n#> AGGGCGCTATTTCC-1 SeuratProject       2020          523 1256\n#> GGAGACGATTCGTT-1 SeuratProject        840          381 1256\n#> CACCGTTGTCGTAG-1 SeuratProject       3097          995 1016\n#> TATCGTACACGCAT-1 SeuratProject       1011          540 1488\n#> TGACGCCTTGCTTT-1 SeuratProject        570          367  101\n#> TACGAGACCTATTC-1 SeuratProject       2399          770 1244\n#>                  stim              cell multiplets\n#> AGGGCGCTATTTCC-1 stim   CD14+ Monocytes    singlet\n#> GGAGACGATTCGTT-1 stim       CD4 T cells    singlet\n#> CACCGTTGTCGTAG-1 ctrl FCGR3A+ Monocytes    singlet\n#> TATCGTACACGCAT-1 stim           B cells    singlet\n#> TGACGCCTTGCTTT-1 ctrl       CD4 T cells       ambs\n#> TACGAGACCTATTC-1 stim       CD4 T cells    singlet\ntable(kang$stim)\n#> \n#> ctrl stim \n#> 2449 2551\ntable(kang$ind, kang$stim)\n#>       \n#>        ctrl stim\n#>   101   178  229\n#>   107   117  107\n#>   1015  514  496\n#>   1016  356  356\n#>   1039  100  118\n#>   1244  380  313\n#>   1256  394  390\n#>   1488  410  542\ntable(paste(kang$ind,kang$stim), kang$cell)\n#>            \n#>             B cells CD14+ Monocytes CD4 T cells CD8 T cells\n#>   101 ctrl       24              48          61          15\n#>   101 stim       30              52          84          17\n#>   1015 ctrl      81             149         145          46\n#>   1015 stim      68             151         150          22\n#>   1016 ctrl      22              72          89         112\n#>   1016 stim      29              65          66         115\n#>   1039 ctrl       7              35          40           6\n#>   1039 stim       7              28          51           6\n#>   107 ctrl        9              51          32           6\n#>   107 stim        9              35          43           1\n#>   1244 ctrl      23              86         206           8\n#>   1244 stim      18              58         191           4\n#>   1256 ctrl      32              81         180          29\n#>   1256 stim      42              70         198          25\n#>   1488 ctrl      36              59         247          13\n#>   1488 stim      59              59         325          15\n#>            \n#>             Dendritic cells FCGR3A+ Monocytes\n#>   101 ctrl                4                11\n#>   101 stim                6                23\n#>   1015 ctrl               4                50\n#>   1015 stim              17                44\n#>   1016 ctrl               4                22\n#>   1016 stim               2                32\n#>   1039 ctrl               1                 3\n#>   1039 stim               1                 8\n#>   107 ctrl                3                12\n#>   107 stim                2                 5\n#>   1244 ctrl               8                19\n#>   1244 stim               6                 4\n#>   1256 ctrl               6                20\n#>   1256 stim               3                11\n#>   1488 ctrl               8                25\n#>   1488 stim              12                28\n#>            \n#>             Megakaryocytes NK cells\n#>   101 ctrl               4       11\n#>   101 stim               1       16\n#>   1015 ctrl              5       34\n#>   1015 stim              5       39\n#>   1016 ctrl              4       31\n#>   1016 stim              1       46\n#>   1039 ctrl              6        1\n#>   1039 stim             10        5\n#>   107 ctrl               1        3\n#>   107 stim               0       12\n#>   1244 ctrl              5       25\n#>   1244 stim              4       28\n#>   1256 ctrl              1       45\n#>   1256 stim              8       33\n#>   1488 ctrl              4       18\n#>   1488 stim              6       38"},{"path":"de2.html","id":"prefiltering","chapter":"7 Differential Expression","heading":"7.1 Prefiltering","text":"","code":""},{"path":"de2.html","id":"why-do-we-need-to-do-this-1","chapter":"7 Differential Expression","heading":"Why do we need to do this?","text":"expression certain level, almost impossible see differential expression.","code":""},{"path":"de2.html","id":"section-3","chapter":"7 Differential Expression","heading":"","text":"differential expression, generally ignore genes low expression.\nsingle cell datasets, many genes like . Filtering make dataset smaller runs quicker, less aggressive correction multiple hypotheses.many genes filtering?many copies gene ?Lets keep genes least 50 copies across entire experiment.many genes filtering?might like see effect IFN-beta stimulation cell type individually. purposes workshop, just going test one cell type; CD14+ MonocytesAn easy way subset object.","code":"\nkang\n#> An object of class Seurat \n#> 35635 features across 5000 samples within 1 assay \n#> Active assay: RNA (35635 features, 2000 variable features)\n#>  3 layers present: counts, data, scale.data\n#>  2 dimensional reductions calculated: pca, umap\ntotal_per_gene <- rowSums(GetAssayData(kang, 'RNA', layer = \"counts\")) #Make sure its RNA assay, layer = counts\nhist(log10(total_per_gene))\nkang <- kang[total_per_gene >= 50, ] \nkang\n#> An object of class Seurat \n#> 7216 features across 5000 samples within 1 assay \n#> Active assay: RNA (7216 features, 1228 variable features)\n#>  3 layers present: counts, data, scale.data\n#>  2 dimensional reductions calculated: pca, umap\n# Set idents to 'cell' column.\nIdents(kang) <- kang$cell\nDimPlot(kang)\nkang.celltype <- kang[, kang$cell == \"CD14+ Monocytes\" ]\nDimPlot(kang.celltype)"},{"path":"de2.html","id":"default-wilcox-test","chapter":"7 Differential Expression","heading":"7.2 Default Wilcox test","text":"run test, change Idents factor(column) want test. case, ’s ‘stim’.Look top differentially expressed genes.","code":"\n# Change Ident to Condition\nIdents(kang.celltype) <- kang.celltype$stim\n\n# default, wilcox test\nde_result_wilcox <- FindMarkers(kang.celltype, \n            ident.1 = 'stim',\n            ident.2 = 'ctrl',\n            logfc.threshold = 0, # Give me ALL results\n            min.pct = 0\n            )\n#> For a (much!) faster implementation of the Wilcoxon Rank Sum Test,\n#> (default method for FindMarkers) please install the presto package\n#> --------------------------------------------\n#> install.packages('devtools')\n#> devtools::install_github('immunogenomics/presto')\n#> --------------------------------------------\n#> After installation of presto, Seurat will automatically use the more \n#> efficient implementation (no further action necessary).\n#> This message will be shown once per session\n\n# Add average expression for plotting\n\nde_result_wilcox$AveExpr<- rowMeans(GetAssayData(kang.celltype,assay=\"RNA\", layer = \"data\")[rownames(de_result_wilcox),])\nhead(de_result_wilcox)\n#>                 p_val avg_log2FC pct.1 pct.2     p_val_adj\n#> RSAD2   5.541857e-197   6.807428 0.975 0.043 3.999004e-193\n#> CXCL10  9.648067e-197   8.043584 0.973 0.038 6.962045e-193\n#> IFIT3   4.988121e-196   6.232966 0.979 0.050 3.599428e-192\n#> TNFSF10 1.116418e-195   6.567507 0.977 0.055 8.056075e-192\n#> IFIT1   8.116699e-190   6.764859 0.950 0.026 5.857010e-186\n#> ISG15   1.524836e-187   6.373685 0.998 0.320 1.100322e-183\n#>          AveExpr\n#> RSAD2   1.686530\n#> CXCL10  2.388462\n#> IFIT3   1.701247\n#> TNFSF10 1.682688\n#> IFIT1   1.584751\n#> ISG15   3.239774\np1 <- ggplot(de_result_wilcox, aes(x=AveExpr, y=avg_log2FC, col=p_val_adj < 0.05)) +\n  geom_point() +\n  scale_colour_manual(values=c('TRUE'=\"red\",'FALSE'=\"black\")) + \n  theme_bw() +\n  ggtitle(\"Wilcox Test\")\n\n\np2 <- ggplot(de_result_wilcox, aes(x=avg_log2FC, y=-log10(p_val), col=p_val_adj < 0.05)) +\n  geom_point() +\n  scale_colour_manual(values=c('TRUE'=\"red\",'FALSE'=\"black\")) + \n  theme_bw() +\n  ggtitle(\"Wilcox Test (Volcano)\")\n\np1 + p2"},{"path":"de2.html","id":"seurat-negative-binomial","chapter":"7 Differential Expression","heading":"7.3 Seurat Negative binomial","text":"Negative binonial test run almost way - just need specify ‘test.use’Look top differentially expressed genes.","code":"\n\n# Change Ident to Condition\nIdents(kang.celltype) <- kang.celltype$stim\n\n# default, wilcox test\nde_result_negbinom <- FindMarkers(kang.celltype, \n            test.use=\"negbinom\", # Choose a different test.\n            ident.1 = 'stim',\n            ident.2 = 'ctrl',\n            logfc.threshold = 0, # Give me ALL results\n            min.pct = 0\n)\n\n# Add average expression for plotting\nde_result_negbinom$AveExpr<- rowMeans(GetAssayData(kang.celltype,assay=\"RNA\", layer = \"data\")[rownames(de_result_negbinom),])\nhead(de_result_negbinom)\n#>          p_val avg_log2FC pct.1 pct.2 p_val_adj  AveExpr\n#> CXCL10       0   8.043584 0.973 0.038         0 2.388462\n#> CCL8         0   8.166731 0.909 0.022         0 2.071022\n#> LY6E         0   4.891032 0.973 0.133         0 1.736931\n#> APOBEC3A     0   4.755297 0.992 0.258         0 2.311961\n#> IFITM3       0   4.683573 0.994 0.267         0 2.190185\n#> IFI6         0   3.950817 0.979 0.253         0 1.820140\np1 <- ggplot(de_result_negbinom, aes(x=AveExpr, y=avg_log2FC, col=p_val_adj < 0.05)) +\n  geom_point() +\n  scale_colour_manual(values=c('TRUE'=\"red\",'FALSE'=\"black\")) + \n  theme_bw() +\n  ggtitle(\"Negative Bionomial Test\")\n\n\np2 <- ggplot(de_result_negbinom, aes(x=avg_log2FC, y=-log10(p_val), col=p_val_adj < 0.05)) +\n  geom_point() +\n  scale_colour_manual(values=c('TRUE'=\"red\",'FALSE'=\"black\")) + \n  theme_bw() +\n  ggtitle(\"Negative Bionomial Test (Volcano)\")\n\np1 + p2"},{"path":"de2.html","id":"pseudobulk","chapter":"7 Differential Expression","heading":"7.4 Pseudobulk","text":"Pseudobulk analysis option biological replicates. essentially pooling individual cell counts treating expreiment like bulk RNAseq.First, need build pseudobulk matrix - AggregateExpression() function can , set ‘Idents’ seurat object grouping factor (, thats combination individual+treatment called ‘sample’, instead ‘stim’ treatment column).Now looks like bulk RNAseq experiment, treat like one.can use popular limma package differential expression. one tutorial, hefty reference manual hosted bioconductor.brief, code constructs linear model experiment accounts variation individuals treatment. tests differential expression ‘stim’ ‘ctrl’ groups.Look significantly differentially expressed genes:","code":"\n# Tools for bulk differential expression\nlibrary(limma)\n#> \n#> Attaching package: 'limma'\n#> The following object is masked from 'package:BiocGenerics':\n#> \n#>     plotMA\nlibrary(edgeR)\n#> \n#> Attaching package: 'edgeR'\n#> The following object is masked from 'package:SingleCellExperiment':\n#> \n#>     cpm\n\n\n# Change idents to ind for grouping.\nkang.celltype$sample <- factor(paste(kang.celltype$stim, kang.celltype$ind, sep=\"_\"))\nIdents(kang.celltype) <- kang.celltype$sample\n\n# THen pool together counts in those groups\n# AggregateExperssion returns a list of matricies - one for each assay requested (even just requesting one)\npseudobulk_matrix_list <- AggregateExpression( kang.celltype,  assays='RNA')\n#> Names of identity class contain underscores ('_'), replacing with dashes ('-')\n#> This message is displayed once every 8 hours.\npseudobulk_matrix      <- pseudobulk_matrix_list[['RNA']]\ncolnames(pseudobulk_matrix) <- as.character(colnames(pseudobulk_matrix)) # Changes colnames to simple text\npseudobulk_matrix[1:5,1:4]\n#> 5 x 4 sparse Matrix of class \"dgCMatrix\"\n#>          ctrl-101 ctrl-1015 ctrl-1016 ctrl-1039\n#> NOC2L           2         7         .         .\n#> HES4            .         3         2         1\n#> ISG15          31       185       236        41\n#> TNFRSF18        .         3         4         2\n#> TNFRSF4         .         2         .         .\n\n# Aggregate expression replaces _ with -! We're going to change it back (for limma.)\ncolnames(pseudobulk_matrix) <- gsub(\"-\", \"_\",colnames(pseudobulk_matrix))\ndge <- DGEList(pseudobulk_matrix)\ndge <- calcNormFactors(dge)\n\n# Remove _ and everything after it - yeilds stim group\nstim <- gsub(\"_.*\",\"\",colnames(pseudobulk_matrix)) \n\n# Removing everything before the _ for the individua, then converting those numerical ind explictiy to text. Else limma will treat them as numbers!\nind  <- as.character(gsub(\".*_\",\"\",colnames(pseudobulk_matrix))) \n\ndesign <- model.matrix( ~0 + stim + ind)\nvm  <- voom(dge, design = design, plot = FALSE)\nfit <- lmFit(vm, design = design)\n\ncontrasts <- makeContrasts(stimstim - stimctrl, levels=coef(fit))\nfit <- contrasts.fit(fit, contrasts)\nfit <- eBayes(fit)\n\nde_result_pseudobulk <- topTable(fit, n = Inf, adjust.method = \"BH\")\nde_result_pseudobulk <- arrange(de_result_pseudobulk , adj.P.Val)\nhead(de_result_pseudobulk)\n#>           logFC   AveExpr        t      P.Value\n#> ISG20  5.151090 10.311187 34.62460 1.377577e-28\n#> ISG15  6.926462 11.895928 33.45672 4.402969e-28\n#> CXCL11 9.051653  7.260525 32.07090 1.838679e-27\n#> IFIT3  6.980913  8.420719 28.54319 9.234346e-26\n#> HERC5  6.998957  5.602349 28.68162 7.853707e-26\n#> TMSB10 1.959063 11.466981 27.48469 3.264041e-25\n#>           adj.P.Val        B\n#> ISG20  9.940598e-25 55.27733\n#> ISG15  1.588591e-24 54.12183\n#> CXCL11 4.422636e-24 51.56638\n#> IFIT3  1.332701e-22 48.32088\n#> HERC5  1.332701e-22 48.02111\n#> TMSB10 2.950103e-22 47.34483\np1 <- ggplot(de_result_pseudobulk, aes(x=AveExpr, y=logFC, col=adj.P.Val < 0.05)) +\n  geom_point() +\n  scale_colour_manual(values=c('TRUE'=\"red\",'FALSE'=\"black\")) + \n  theme_bw() +\n  ggtitle(\"Pseudobulk\")\n\n\np2 <- ggplot(de_result_pseudobulk, aes(x=logFC, y=-log10(P.Value), col=adj.P.Val < 0.05)) +\n  geom_point() +\n  scale_colour_manual(values=c('TRUE'=\"red\",'FALSE'=\"black\")) + \n  theme_bw() +\n  ggtitle(\"Pseudobulk Test (Volcano)\")\n\np1 + p2"},{"path":"de2.html","id":"discussion","chapter":"7 Differential Expression","heading":"Discussion","text":"methods give different results. decide use? check individual gene?","code":""},{"path":"CellCycle.html","id":"CellCycle","chapter":"8 Cell cycle Assignment","heading":"8 Cell cycle Assignment","text":"datasets, phase cell cycle cell (G1/G2M/S) can account \nalot observed transcriptomic variation. may clustering phase, \nseparation UMAP phase.Seurat provides simple method assigning cell cycle state cell. methods available.information assigning cell cycle states cells cell cycle vignetteWhich adds S.Score, G2M.Score Phase calls metadata.can check cell phase UMAP. dataset, phase isn’t driving clustering, require handling.bias present, course action depends task hand. might involve ‘regressing ’ cell cycle variation scaling data ScaleData(kang, vars..regress=\"Phase\"), omitting cell-cycle dominated clusters, just accounting differential expression calculations.working non-human data, need convert gene lists, find new cell cycle associated genes species.","code":"\n# A list of cell cycle markers, from Tirosh et al, 2015, is loaded with Seurat.  We can\n# segregate this list into markers of G2/M phase and markers of S phase\ns.genes   <- cc.genes$s.genes\ng2m.genes <- cc.genes$g2m.genes\n\n# Use those lists with the cell cycle scoring function in Seurat.\npbmc <- CellCycleScoring(pbmc, s.features = s.genes, g2m.features = g2m.genes)\n#> Warning: The following features are not present in the\n#> object: DTL, UHRF1, MLF1IP, EXO1, CASP8AP2, BRIP1, E2F8,\n#> not searching for symbol synonyms\n#> Warning: The following features are not present in the\n#> object: FAM64A, BUB1, HJURP, CDCA3, TTK, CDC25C, DLGAP5,\n#> CDCA2, ANLN, GAS2L3, not searching for symbol synonyms\nhead(pbmc@meta.data)\n#>                  orig.ident nCount_RNA nFeature_RNA\n#> AAACATACAACCAC-1     pbmc3k       2419          779\n#> AAACATTGAGCTAC-1     pbmc3k       4903         1352\n#> AAACATTGATCAGC-1     pbmc3k       3147         1129\n#> AAACCGTGCTTCCG-1     pbmc3k       2639          960\n#> AAACCGTGTATGCG-1     pbmc3k        980          521\n#> AAACGCACTGGTAC-1     pbmc3k       2163          781\n#>                  percent.mt RNA_snn_res.0.5 seurat_clusters\n#> AAACATACAACCAC-1  3.0177759               2               6\n#> AAACATTGAGCTAC-1  3.7935958               3               1\n#> AAACATTGATCAGC-1  0.8897363               2               0\n#> AAACCGTGCTTCCG-1  1.7430845               1               5\n#> AAACCGTGTATGCG-1  1.2244898               6               8\n#> AAACGCACTGGTAC-1  1.6643551               2               0\n#>                  RNA_snn_res.0.1 RNA_snn_res.0.2\n#> AAACATACAACCAC-1               0               0\n#> AAACATTGAGCTAC-1               3               3\n#> AAACATTGATCAGC-1               0               0\n#> AAACCGTGCTTCCG-1               1               1\n#> AAACCGTGTATGCG-1               2               2\n#> AAACGCACTGGTAC-1               0               0\n#>                  RNA_snn_res.0.3 RNA_snn_res.0.4\n#> AAACATACAACCAC-1               0               2\n#> AAACATTGAGCTAC-1               3               3\n#> AAACATTGATCAGC-1               0               2\n#> AAACCGTGCTTCCG-1               1               1\n#> AAACCGTGTATGCG-1               2               6\n#> AAACGCACTGGTAC-1               0               2\n#>                  RNA_snn_res.0.6 RNA_snn_res.0.7\n#> AAACATACAACCAC-1               1               1\n#> AAACATTGAGCTAC-1               3               3\n#> AAACATTGATCAGC-1               1               1\n#> AAACCGTGCTTCCG-1               2               2\n#> AAACCGTGTATGCG-1               6               6\n#> AAACGCACTGGTAC-1               1               1\n#>                  RNA_snn_res.0.8 RNA_snn_res.0.9\n#> AAACATACAACCAC-1               6               1\n#> AAACATTGAGCTAC-1               2               2\n#> AAACATTGATCAGC-1               1               1\n#> AAACCGTGCTTCCG-1               4               4\n#> AAACCGTGTATGCG-1               8               7\n#> AAACGCACTGGTAC-1               1               1\n#>                  RNA_snn_res.1 RNA_snn_res.1.1\n#> AAACATACAACCAC-1             6               6\n#> AAACATTGAGCTAC-1             2               2\n#> AAACATTGATCAGC-1             1               1\n#> AAACCGTGCTTCCG-1             4               4\n#> AAACCGTGTATGCG-1             8               8\n#> AAACGCACTGGTAC-1             1               1\n#>                  RNA_snn_res.1.2 RNA_snn_res.1.3\n#> AAACATACAACCAC-1               6               8\n#> AAACATTGAGCTAC-1               2               2\n#> AAACATTGATCAGC-1               1               0\n#> AAACCGTGCTTCCG-1               4               5\n#> AAACCGTGTATGCG-1               8               9\n#> AAACGCACTGGTAC-1               1               0\n#>                  RNA_snn_res.1.4 RNA_snn_res.1.5\n#> AAACATACAACCAC-1               8               9\n#> AAACATTGAGCTAC-1               2               2\n#> AAACATTGATCAGC-1               0               1\n#> AAACCGTGCTTCCG-1               5               4\n#> AAACCGTGTATGCG-1               9               8\n#> AAACGCACTGGTAC-1               0               1\n#>                  RNA_snn_res.1.6 RNA_snn_res.1.7\n#> AAACATACAACCAC-1               8               8\n#> AAACATTGAGCTAC-1               1               1\n#> AAACATTGATCAGC-1               0               0\n#> AAACCGTGCTTCCG-1               3               3\n#> AAACCGTGTATGCG-1               7               7\n#> AAACGCACTGGTAC-1               0               0\n#>                  RNA_snn_res.1.8 RNA_snn_res.1.9\n#> AAACATACAACCAC-1               7               6\n#> AAACATTGAGCTAC-1               1               1\n#> AAACATTGATCAGC-1               0               0\n#> AAACCGTGCTTCCG-1               3               3\n#> AAACCGTGTATGCG-1               8               8\n#> AAACGCACTGGTAC-1               0               0\n#>                  RNA_snn_res.2 Naive_CD4_T1  cell_label\n#> AAACATACAACCAC-1             6   1.22824523 Naive_CD4_T\n#> AAACATTGAGCTAC-1             1  -0.08111043        <NA>\n#> AAACATTGATCAGC-1             0  -0.37682601        <NA>\n#> AAACCGTGCTTCCG-1             5  -0.72739714        <NA>\n#> AAACCGTGTATGCG-1             8  -1.17396454        <NA>\n#> AAACGCACTGGTAC-1             0  -0.63807586        <NA>\n#>                  cluster    celltype pretty_cluster_labels\n#> AAACATACAACCAC-1      c2 Memory CD4+       c2: Memory CD4+\n#> AAACATTGAGCTAC-1      c3           B                 c3: B\n#> AAACATTGATCAGC-1      c2 Memory CD4+       c2: Memory CD4+\n#> AAACCGTGCTTCCG-1      c1  CD14+ Mono        c1: CD14+ Mono\n#> AAACCGTGTATGCG-1      c6          NK                c6: NK\n#> AAACGCACTGGTAC-1      c2 Memory CD4+       c2: Memory CD4+\n#>                  SingleR.labels     S.Score    G2M.Score\n#> AAACATACAACCAC-1        T_cells  0.09853841 -0.044716507\n#> AAACATTGAGCTAC-1         B_cell -0.02364305 -0.046889929\n#> AAACATTGATCAGC-1        T_cells -0.02177266  0.074841537\n#> AAACCGTGCTTCCG-1       Monocyte  0.03794398  0.006575446\n#> AAACCGTGTATGCG-1        NK_cell -0.03309970  0.027910063\n#> AAACGCACTGGTAC-1        T_cells -0.04814181 -0.078164839\n#>                  Phase\n#> AAACATACAACCAC-1     S\n#> AAACATTGAGCTAC-1    G1\n#> AAACATTGATCAGC-1   G2M\n#> AAACCGTGCTTCCG-1     S\n#> AAACCGTGTATGCG-1   G2M\n#> AAACGCACTGGTAC-1    G1\nDimPlot(pbmc, reduction = 'umap', group.by = \"Phase\")"},{"path":"Harmony.html","id":"Harmony","chapter":"9 Data set integration with Harmony","heading":"9 Data set integration with Harmony","text":"","code":""},{"path":"Harmony.html","id":"why-do-we-need-to-do-this-2","chapter":"9 Data set integration with Harmony","heading":"Why do we need to do this?","text":"can data coming different samples, batches experiments need combine .","code":""},{"path":"Harmony.html","id":"section-4","chapter":"9 Data set integration with Harmony","heading":"","text":"data collected multiple samples, multiple runs single cell sequencing library preparation, multiple conditions, cells type may become separated UMAP put several different clusters.purpose clustering cell identification, like remove effects.now look GSE96583, another PBMC dataset. speed, looking subset 5000 cells data. cells dataset pooled eight individual donors. nice feature genetic differences allow cell doublets identified. data contains two batches single cell sequencing. One batches stimulated IFN-beta.data already processed done first PBMC dataset, can loaded kang2018.rds.ind identifies cell coming one 8 individuals.stim identifies cell control stimulated IFN-beta.cell contains cell types identified creators data set.multiplets classifies cells singlet doublet.big difference unstimulated stimulated cells. split cells type pairs clusters. difference simply uniform, regress (e.g. using ScaleData(..., vars..regress=\"stim\")). However, can seen PCA plot, difference uniform need something cleverer.use Harmony, can remove non-uniform effects. try remove small differences individuals large difference unstimulated stimulated cells.Harmony operates PCA scores. original gene expression levels remain unaltered.added new set reduced dimensions Seurat object, kang$harmony modified version existing kang$pca reduced dimensions. PCA plot shows large difference ‘ctrl’ ‘stim’, removed harmony reduction.can use harmony way used pca reduction compute UMAP layout find clusters.found good set clusters, usually perform differential expression analysis original data include batches/runs/individuals predictors linear model. example now compare un-stimulated stimulated cells within cluster. particularly nice statistical approach possible convert counts pseudo-bulk data eight individuals, apply bulk RNA-Seq differential expression analysis method. However still problem unstimulated stimulated cells processed separate batches.","code":"\nkang <- readRDS(\"data/kang2018.rds\")\n\nhead(kang@meta.data)\n#>                     orig.ident nCount_RNA nFeature_RNA  ind\n#> AGGGCGCTATTTCC-1 SeuratProject       2020          523 1256\n#> GGAGACGATTCGTT-1 SeuratProject        840          381 1256\n#> CACCGTTGTCGTAG-1 SeuratProject       3097          995 1016\n#> TATCGTACACGCAT-1 SeuratProject       1011          540 1488\n#> TGACGCCTTGCTTT-1 SeuratProject        570          367  101\n#> TACGAGACCTATTC-1 SeuratProject       2399          770 1244\n#>                  stim              cell multiplets\n#> AGGGCGCTATTTCC-1 stim   CD14+ Monocytes    singlet\n#> GGAGACGATTCGTT-1 stim       CD4 T cells    singlet\n#> CACCGTTGTCGTAG-1 ctrl FCGR3A+ Monocytes    singlet\n#> TATCGTACACGCAT-1 stim           B cells    singlet\n#> TGACGCCTTGCTTT-1 ctrl       CD4 T cells       ambs\n#> TACGAGACCTATTC-1 stim       CD4 T cells    singlet\nDimPlot(kang, reduction=\"umap\", group.by=\"ind\")\nDimPlot(kang, reduction=\"umap\", group.by=\"stim\")\n\n\nkang <- FindNeighbors(kang, reduction=\"pca\", dims=1:10)\n#> Computing nearest neighbor graph\n#> Computing SNN\nkang <- FindClusters(kang, resolution=0.25)\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 5000\n#> Number of edges: 175130\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.9501\n#> Number of communities: 12\n#> Elapsed time: 0 seconds\nkang$pca_clusters <- kang$seurat_clusters\n\nDimPlot(kang, reduction=\"umap\", group.by=\"pca_clusters\")\nlibrary(harmony)\n#> Loading required package: Rcpp\n\nkang <- RunHarmony(kang, c(\"stim\", \"ind\"), reduction=\"pca\")\n#> Harmony 1/10\n#> Harmony 2/10\n#> Harmony 3/10\n#> Harmony 4/10\n#> Harmony 5/10\n#> Harmony 6/10\n#> Harmony 7/10\n#> Harmony 8/10\n#> Harmony 9/10\n#> Harmony converged after 9 iterations\nDimPlot(kang, reduction=\"pca\", group.by=\"stim\")\nDimPlot(kang, reduction=\"harmony\", group.by=\"stim\")\nkang <- RunUMAP(kang, reduction=\"harmony\", dims=1:10, reduction.name=\"umap_harmony\")\n#> 09:11:39 UMAP embedding parameters a = 0.9922 b = 1.112\n#> Found more than one class \"dist\" in cache; using the first, from namespace 'spam'\n#> Also defined by 'BiocGenerics'\n#> 09:11:39 Read 5000 rows and found 10 numeric columns\n#> 09:11:39 Using Annoy for neighbor search, n_neighbors = 30\n#> Found more than one class \"dist\" in cache; using the first, from namespace 'spam'\n#> Also defined by 'BiocGenerics'\n#> 09:11:39 Building Annoy index with metric = cosine, n_trees = 50\n#> 0%   10   20   30   40   50   60   70   80   90   100%\n#> [----|----|----|----|----|----|----|----|----|----|\n#> **************************************************|\n#> 09:11:39 Writing NN index file to temp file /var/folders/tp/b078yqdd4ydff9fx87lfttpj_sc0x3/T//RtmpuTMKhs/file1422960178c2\n#> 09:11:39 Searching Annoy index using 1 thread, search_k = 3000\n#> 09:11:40 Annoy recall = 100%\n#> 09:11:41 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30\n#> 09:11:42 Initializing from normalized Laplacian + noise (using RSpectra)\n#> 09:11:42 Commencing optimization for 500 epochs, with 210490 positive edges\n#> 09:11:46 Optimization finished\n\nDimPlot(kang, reduction=\"umap_harmony\", group.by=\"stim\")\n\nkang <- FindNeighbors(kang, reduction=\"harmony\", dims=1:10)\n#> Computing nearest neighbor graph\n#> Computing SNN\nkang <- FindClusters(kang, resolution=0.25)\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 5000\n#> Number of edges: 171396\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.9324\n#> Number of communities: 9\n#> Elapsed time: 0 seconds\nkang$harmony_clusters <- kang$seurat_clusters\n\nDimPlot(kang, reduction=\"umap_harmony\", group.by=\"harmony_clusters\")\nDimPlot(kang, reduction=\"umap\", group.by=\"harmony_clusters\")"},{"path":"resources.html","id":"resources","chapter":"10 Resources","heading":"10 Resources","text":"Useful resources next steps.","code":""},{"path":"resources.html","id":"help-and-fruther-resources","chapter":"10 Resources","heading":"10.1 Help and fruther Resources","text":"","code":""},{"path":"resources.html","id":"seurat-vignettes","chapter":"10 Resources","heading":"Seurat Vignettes","text":"https://satijalab.org/seurat/index.htmlThere good many Seurat vigettes different aspects Seurat package. E.g.Guided Clustering tutorial : ’ve just worked thisDifferential expression : Exploration differential expression methods within SeuratData integration : Seurat’s data integration popular method combine different datasets one joint analysis.Merging seurat objectsl): handling real life experiments one sample!","code":""},{"path":"resources.html","id":"seurat-cheatsheet","chapter":"10 Resources","heading":"Seurat Cheatsheet","text":"https://satijalab.org/seurat/articles/essential_commands.htmlA useful resource asking; can ‘X’ seurat object?","code":""},{"path":"resources.html","id":"osca","chapter":"10 Resources","heading":"OSCA","text":"https://bioconductor.org/books/release/OSCA/comprehensive resource analysis approaches single cell data.\nuses SingleCellExperiment bioconductor ecosystem, alot principle still apply.includes good discussion useing pseudobulk approaches, worth checking differential expression analyses.","code":""},{"path":"resources.html","id":"mbp-training-reading-list","chapter":"10 Resources","heading":"MBP training Reading list","text":"https://monashbioinformaticsplatform.github.io/Single-Cell-Workshop/workshop page previous workshop (upon one based) run Monash Bioinformatics Platform - bottom \nextensive list useful single cell links resources.","code":""},{"path":"resources.html","id":"biocommons-single-cell-omics","chapter":"10 Resources","heading":"Biocommons Single Cell Omics","text":"https://www.biocommons.org.au/single-cell-omicsJoin single cell omics community resources setup biocommons.","code":""},{"path":"resources.html","id":"data","chapter":"10 Resources","heading":"10.2 Data","text":"","code":""},{"path":"resources.html","id":"demo-10x-data","chapter":"10 Resources","heading":"Demo 10X data","text":"https://www.10xgenomics.com/resources/datasets10X genomics quite example datasets availble download (including PBMC3k).\nuseful resource want see ‘raw’ data looks like particular technology.","code":""},{"path":"resources.html","id":"geo","chapter":"10 Resources","heading":"GEO","text":"https://www.ncbi.nlm.nih.gov/geo/Many papers publish raw single cell data GEO. Formats vary, often can find counts matrix.","code":""},{"path":"resources.html","id":"seurat-data","chapter":"10 Resources","heading":"Seurat data","text":"https://github.com/satijalab/seurat-dataPackage obtaining datasets seurat objects.","code":""},{"path":"resources.html","id":"analysis-tools","chapter":"10 Resources","heading":"10.3 Analysis Tools","text":"handful many tools might worth checking next steps.","code":""},{"path":"resources.html","id":"cyclone","chapter":"10 Resources","heading":"Cyclone","text":"https://pubmed.ncbi.nlm.nih.gov/26142758/Part scran package, cyclone (nother) method determining cell phase.\nDoco","code":""},{"path":"resources.html","id":"harmony","chapter":"10 Resources","heading":"Harmony","text":"https://portals.broadinstitute.org/harmony/articles/quickstart.htmlMethod integration multiple single cell datasets.","code":""},{"path":"resources.html","id":"singler-1","chapter":"10 Resources","heading":"SingleR","text":"http://bioconductor.org/books/release/SingleRBook/extensive documentation singleR package ‘singleR’ book.","code":""},{"path":"resources.html","id":"scrublet","chapter":"10 Resources","heading":"Scrublet","text":"https://github.com/swolock/scrubletA python based tool doublet detection. One many tools space.","code":""},{"path":"resources.html","id":"scvelo","chapter":"10 Resources","heading":"ScVelo","text":"https://scvelo.readthedocs.io/package single cell RNA velocity analysis, useful developmental/pseudotime trajectories. Python/scanpy based.","code":""},{"path":"resources.html","id":"monocle","chapter":"10 Resources","heading":"Monocle","text":"https://cole-trapnell-lab.github.io/monocle3/package single cell developmental//pseudotime trajectory analysis.","code":""},{"path":"resources.html","id":"tidyseurat","chapter":"10 Resources","heading":"TidySeurat","text":"https://stemangiola.github.io/tidyseurat/fans tidyverse-everything, ’s tidyseurat. Example workflow ","code":""},{"path":"resources.html","id":"preprocessing-tools","chapter":"10 Resources","heading":"10.4 Preprocessing Tools","text":"Tooks process raw sequencing data counts matricies","code":""},{"path":"resources.html","id":"cell-ranger","chapter":"10 Resources","heading":"Cell Ranger","text":"https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/--cell-rangerCellRanger 10X tool takes raw fastq sequence files produces counts matricies starting point today’s analysis. works 10X data.","code":""},{"path":"resources.html","id":"starsolo","chapter":"10 Resources","heading":"STARSolo","text":"STAR aligner (actually used within cell ranger). STARSolo tool producing counts matricies, configurable enough use multiple technologies.https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md","code":""}]
